// استيراد المكتبات المطلوبة
require('dotenv').config();

const express = require('express');
const path = require('path');
const nodemailer = require('nodemailer');
const bodyParser = require('body-parser');
const crypto = require('crypto');
const twilio = require('twilio');
const mongoose = require('mongoose'); // للتعامل مع قاعدة البيانات MongoDB
const bcrypt = require('bcrypt'); // لتشفير كلمات المرور

// إعداد Express
const app = express();
app.use(bodyParser.json());


// إعداد Twilio
const twilioAccountSid = 'AC4245e7044de491a9f3028d3902c3ae66'; // احصل على هذه القيم من ملف البيئة
const twilioAuthToken = 'a57e5fa7003cbbe0205df49dfb7a690e';
const twilioNumber = '+18305005923'; // رقم هاتف Twilio الخاص بك

const client = twilio(twilioAccountSid, twilioAuthToken); // تم تصحيح استدعاء Twilio

// استخدم client للقيام بالعمليات، على سبيل المثال، إرسال رسالة
client.messages
  .create({
    body: 'مرحبًا! هذه رسالة تجريبية.',
    from: twilioNumber, // رقم Twilio الخاص بك
    to: '+962770288772', // الرقم الذي سترسل إليه الرسالة
  })
  .then((message) => console.log(message.sid))
  .catch((error) => console.error(error));

// إعداد Nodemailer
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: 'salemhra86@gmail.com',
        pass: 'exdj jkom tvzz hruy',
    },
});

// الاتصال بقاعدة البيانات MongoDB
mongoose.connect('mongodb://localhost:27017/your-database-name')
    .then(() => console.log('تم الاتصال بقاعدة البيانات MongoDB'))
    .catch(err => console.error('خطأ في الاتصال بقاعدة البيانات:', err));

// نموذج المستخدم
const UserSchema = new mongoose.Schema({
    fullName: String,
    nationalId: String,
    carNumber: String,
    carColor: String,
    email: String,
    phone: String,
    password: String,
});

const TripSchema = new mongoose.Schema({
    departure: String,
    arrival: String,
    // أضف الحقول الأخرى الضرورية للرحلة هنا
});

const Trip = mongoose.model('Trip', TripSchema); // نموذج الرحلة

// مسار الجذر
app.use(express.static(path.join(__dirname, 'public')));

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// نقاط النهاية الأخرى...
app.get('/login.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

app.get('/search.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'search.html'));
});

// إضافة نقطة النهاية للبحث عن الرحلات
app.get('/get-trips', async (req, res) => {
    const { departure, arrival } = req.query;
    
    try {
        // البحث عن الرحلات في قاعدة البيانات
        const trips = await Trip.find({ departure, arrival });

        if (trips.length > 0) {
            res.json({ success: true, trips });
        } else {
            res.json({ success: false, message: 'No trips found' });
        }
    } catch (error) {
        console.error('Error retrieving trips:', error);
        res.status(500).json({ success: false, message: 'Internal Server Error' });
    }
});

const User = mongoose.model('User', UserSchema);

// إضافة مستخدم جديد
async function addUser(newUser) {
    const user = new User(newUser);
    await user.save();
    notifyAdmin(newUser);
}

// إشعار المسؤول عبر البريد الإلكتروني
function notifyAdmin(newUser) {
    const acceptLink = `http://localhost:3000/approve-user/${newUser.phone}`;
    const rejectLink = `http://localhost:3000/reject-user/${newUser.phone}`;
    
    const htmlContent = 
        // مسار لإرسال تفاصيل تسجيل مستخدم جديد
app.post('/new-user', async (req, res) => {
    const newUser = req.body; // استلام بيانات المستخدم الجديد
    const acceptLink = `http://localhost:3000/approve-user/${newUser.phone}`;
    const rejectLink = `http://localhost:3000/reject-user/${newUser.phone}`;

    const htmlContent = `
        <h2>طلب تسجيل مستخدم جديد</h2>
        <p>مستخدم جديد قام بالتسجيل. التفاصيل كما يلي:</p>
        <ul>
            <li><strong>الاسم الكامل:</strong> ${newUser.fullName}</li>
            <li><strong>الرقم الوطني:</strong> ${newUser.nationalId}</li>
            <li><strong>رقم السيارة:</strong> ${newUser.carNumber}</li>
            <li><strong>اللون:</strong> ${newUser.carColor}</li>
            <li><strong>البريد الإلكتروني:</strong> ${newUser.email}</li>
            <li><strong>الهاتف:</strong> ${newUser.phone}</li>
        </ul>
        <p>الرجاء اتخاذ الإجراء المناسب:</p>
        <a href="${acceptLink}" style="padding: 10px 20px; background-color: green; color: white; text-decoration: none; border-radius: 5px;">قبول</a>
        <a href="${rejectLink}" style="padding: 10px 20px; background-color: red; color: white; text-decoration: none; border-radius: 5px;">رفض</a>
    `;

    // يمكنك هنا إرسال الـ HTML عبر البريد الإلكتروني أو استجابة HTTP
    // كمثال، إرسال الاستجابة:
    res.send(htmlContent);
});

    ;

    const mailOptions = {
        from: 'salemhra86@gmail.com',
        to: 'salemhra86@gmail.com', // إرسال البريد إلى البريد الإلكتروني للإدارة
        subject: 'طلب تسجيل مستخدم جديد',
        html: htmlContent,
    };

    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            return console.log(error);
        }
        console.log('تم إرسال البريد الإلكتروني: ' + info.response);
    });
}

// مسار لقبول طلب المستخدم
app.post('/approve-user/:phone', async (req, res) => {
    const phone = req.params.phone;
    
    try {
        const approvedUser = await User.findOne({ phone });

        if (!approvedUser) {
            return res.status(404).json({ success: false, message: 'المستخدم غير موجود.' });
        }

        const paymentLink = `http://localhost:3000/payment/${approvedUser.phone}`;

        // إرسال رسالة نصية تحتوي على رابط الدفع
        await client.messages.create({
            body: `مرحباً ${approvedUser.fullName}، تم الموافقة على طلب التسجيل الخاص بك. يرجى إتمام الدفع عبر الرابط التالي: ${paymentLink}`,
            from: twilioNumber,
            to: approvedUser.phone
        });

        console.log(`تم إرسال رسالة نصية إلى ${approvedUser.phone}`);

        return res.status(200).json({ success: true, message: 'تم إرسال رابط الدفع إلى العميل.' });

    } catch (error) {
        console.error(`فشل إرسال الرسالة: ${error}`);
        return res.status(500).json({ success: false, message: 'فشل في معالجة الطلب. يرجى المحاولة لاحقاً.' });
    }
});

// مسار لرفض طلب المستخدم
app.post('/reject-user/:phone', async (req, res) => {
    const phone = req.params.phone;
    const reason = req.body.reason;

    const rejectedUser = await User.findOne({ phone });
    if (!rejectedUser) {
        return res.status(404).json({ success: false, message: 'المستخدم غير موجود.' });
    }

    // إرسال رسالة نصية توضح سبب الرفض
    client.messages.create({
        body: `عذراً ${rejectedUser.fullName}، تم رفض طلب التسجيل الخاص بك. السبب: ${reason}`, // استخدام علامات اقتباس 
        from: twilioNumber,
        to: rejectedUser.phone
    })
    .then(message => console.log(`تم إرسال رسالة الرفض: ${message.sid}`)) // استخدام علامات اقتباس هنا أيضاً
    .catch(err => console.error(`حدث خطأ أثناء إرسال الرسالة: ${err.message}`)); // إضافة معالجة الأخطاء

    res.status(200).json({ success: true, message: 'تم إرسال سبب الرفض للعميل.' });
});

// مسار الدفع الناجح
app.post('/payment-success/:phone', async (req, res) => {
    const phone = req.params.phone;
    const approvedUser = await User.findOne({ phone });

    if (!approvedUser) {
        return res.status(404).json({ success: false, message: 'المستخدم غير موجود.' });
    }

   const confirmLink = `http://localhost:3000/confirm-user/${approvedUser.phone}`;

const htmlContent = `
    <h2>تم إكمال الدفع بنجاح</h2>
    <p>العميل ${approvedUser.fullName} قام بالدفع. يرجى تأكيد التسجيل:</p>
    <a href="${confirmLink}" style="padding: 10px 20px; background-color: blue; color: white; text-decoration: none; border-radius: 5px;">تأكيد التسجيل</a>
`;

    const mailOptions = {
        from: 'salemhra86@gmail.com',
        to: 'salemhra86@gmail.com', // بريد المسؤول
        subject: 'إشعار الدفع الناجح',
        html: htmlContent,
    };

    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            return console.log(error);
        }
        console.log('تم إرسال البريد الإلكتروني: ' + info.response);
    });

    res.status(200).json({ success: true, message: 'تم إرسال إشعار الدفع إلى الإدارة.' });
});

// تأكيد المستخدم بعد الدفع
app.post('/confirm-user/:phone', async (req, res) => {
    const phone = req.params.phone;

    const confirmedUser = await User.findOne({ phone });
    if (!confirmedUser) {
        return res.status(404).json({ success: false, message: 'المستخدم غير موجود.' });
    }

    // توليد كلمة مرور عشوائية
    const password = crypto.randomBytes(4).toString('hex'); // توليد كلمة مرور عشوائية
    confirmedUser.password = await bcrypt.hash(password, 10); // تشفير كلمة المرور

    await confirmedUser.save();

    // إرسال رسالة نصية تحتوي على معلومات تسجيل الدخول
    await client.messages.create({
        body: `مرحباً ${confirmedUser.fullName}، تم تأكيد تسجيلك. اسم المستخدم: ${confirmedUser.phone}، كلمة المرور: ${password}`,
        from: twilioNumber,
        to: confirmedUser.phone
    });

    res.status(200).json({ success: true, message: 'تم تأكيد تسجيل المستخدم وإرسال المعلومات عبر الرسالة.' });
});

// بدء الخادم
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`الخادم يعمل على المنفذ ${PORT}`);
});
